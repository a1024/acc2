#pragma once
#ifndef STD_QUEUE
#define STD_QUEUE
#include	"vector"
namespace	std
{
	template<typename T, int Align=8>struct queue
	{
		typedef queue<T> CType;
		typedef vector<T, Align> VType;

		VType v;

		queue(){}
		queue(CType const &other):v(other.v){}
		queue(CType &&other):v((VType&&)other.v){}

		T* data(){return v.data();}//non-standard

		void push(T const &e){v.push_back(e);}
		void push(T &&e){v.push_back((T&&)e);}

		T& front(){return *v.begin();}
		T const& front()const{return *v.begin();}

		void pop(){v.erase(0);}

		size_t size()const{return v.size();}
		bool empty()const{return v.empty();}

		void clear(){v.clear();}
	};
}
#endif//STD_STACK